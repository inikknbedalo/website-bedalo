---
/**
 * Gallery Section Component
 * Main gallery orchestrator with filter and modal
 */
import type { ImageMetadata } from 'astro';
import GalleryFilter from '@/components/gallery/GalleryFilter.astro';
import GalleryItem from '@/components/gallery/GalleryItem.astro';
import GalleryModal from '@/components/gallery/GalleryModal.astro';

interface GalleryImage {
  src: ImageMetadata;
  alt: string;
  category?: string;
}

interface Props {
  images: GalleryImage[];
  categories?: string[];
  class?: string;
}

const { images, categories = [], class: className = '' } = Astro.props;
const hasCategories = categories.length > 0;
---

<div class:list={['gallery-section', className]}>
  {hasCategories && <GalleryFilter categories={categories} />}

  <div class="grid grid-cols-2 gap-4 sm:grid-cols-3 lg:grid-cols-4">
    {
      images.map((image, index) => (
        <GalleryItem
          src={image.src}
          alt={image.alt}
          category={image.category}
          index={index}
        />
      ))
    }
  </div>

  <GalleryModal />
</div>

<script>
  function initGallery() {
    const filterButtons = document.querySelectorAll<HTMLButtonElement>('.gallery-filter');
    const galleryItems = document.querySelectorAll<HTMLElement>('.gallery-item');
    const modal = document.getElementById('gallery-modal');
    const modalImage = document.getElementById('modal-image') as HTMLImageElement;
    const modalTitle = document.getElementById('gallery-modal-title');
    const closeBtn = document.getElementById('close-modal');
    const prevBtn = document.getElementById('prev-image');
    const nextBtn = document.getElementById('next-image');

    let currentIndex = 0;
    let visibleImages: HTMLElement[] = [];

    function updateVisibleImages() {
      visibleImages = Array.from(galleryItems).filter(
        (item) => !item.classList.contains('hidden')
      );
    }

    filterButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const category = button.dataset.category;

        filterButtons.forEach((btn) => {
          btn.classList.remove('bg-blue-600', 'text-white');
          btn.classList.add('bg-white', 'text-gray-700');
        });

        button.classList.remove('bg-white', 'text-gray-700');
        button.classList.add('bg-blue-600', 'text-white');

        galleryItems.forEach((item) => {
          const itemCategory = item.dataset.category;
          if (category === 'semua' || itemCategory === category) {
            item.classList.remove('hidden');
          } else {
            item.classList.add('hidden');
          }
        });

        updateVisibleImages();
      });
    });

    galleryItems.forEach((item) => {
      item.addEventListener('click', () => {
        const index = parseInt(item.dataset.index || '0', 10);
        currentIndex = visibleImages.findIndex((img) => img.dataset.index === String(index));

        const imgElement = item.querySelector('img');
        if (imgElement && modal && modalImage && modalTitle) {
          modalImage.src = imgElement.src;
          modalImage.alt = imgElement.alt;
          modalTitle.textContent = imgElement.alt;
          modal.classList.remove('hidden');
          modal.classList.add('flex');
          document.body.style.overflow = 'hidden';
        }
      });
    });

    function closeModal() {
      if (modal) {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        document.body.style.overflow = '';
      }
    }

    function showImage(index: number) {
      if (visibleImages.length === 0) return;

      currentIndex = (index + visibleImages.length) % visibleImages.length;
      const item = visibleImages[currentIndex];
      const imgElement = item.querySelector('img');

      if (imgElement && modalImage && modalTitle) {
        modalImage.src = imgElement.src;
        modalImage.alt = imgElement.alt;
        modalTitle.textContent = imgElement.alt;
      }
    }

    closeBtn?.addEventListener('click', closeModal);
    prevBtn?.addEventListener('click', () => showImage(currentIndex - 1));
    nextBtn?.addEventListener('click', () => showImage(currentIndex + 1));

    modal?.addEventListener('click', (e) => {
      if (e.target === modal) closeModal();
    });

    document.addEventListener('keydown', (e) => {
      if (!modal?.classList.contains('flex')) return;

      if (e.key === 'Escape') closeModal();
      if (e.key === 'ArrowLeft') showImage(currentIndex - 1);
      if (e.key === 'ArrowRight') showImage(currentIndex + 1);
    });

    updateVisibleImages();
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initGallery);
  } else {
    initGallery();
  }
</script>
